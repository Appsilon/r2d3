(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _html = require('../util/html.js');

var _html2 = _interopRequireDefault(_html);

var _manipulation = require('./manipulation.js');

var _find = require('./find.js');

var _styles = require('./styles.js');

var styles = _interopRequireWildcard(_styles);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function djs(template) {
  if (typeof template === 'string') {
    return (0, _find.find)(template);
  } else if (Array.isArray(template)) {
    for (var _len = arguments.length, substs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      substs[_key - 1] = arguments[_key];
    }

    return _html2.default.apply(undefined, [template].concat(substs));
  }
}

djs.create = _manipulation.create;
djs.css = styles.css;
djs.addClass = styles.addClass;
djs.removeClass = styles.removeClass;
djs.toggleClass = styles.toggleClass;
djs.containsClass = styles.containsClass;
djs.find = _find.find;
djs.findAll = _find.findAll;
djs.remove = _manipulation.remove;

exports.default = djs;

},{"../util/html.js":7,"./find.js":3,"./manipulation.js":4,"./styles.js":5}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = djsfy;

var _d = require('./d.js');

var _d2 = _interopRequireDefault(_d);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function djsfy(node) {
  if (!node) return null;

  node.find = function (string) {
    return _d2.default.find(string, node);
  };
  node.findAll = function (string) {
    return _d2.default.findAll(string, node);
  };
  node.create = function (string) {
    var element = _d2.default.create(string);

    node.appendChild(element);

    return element;
  };

  node.css = function (cssStyles) {
    return _d2.default.css(node, cssStyles);
  };
  node.addClass = function (classList) {
    return _d2.default.addClass(node, classList);
  };
  node.removeClass = function (classToRemove) {
    return _d2.default.removeClass(node, classToRemove);
  };
  node.toggleClass = function (className, force) {
    return _d2.default.toggleClass(node, className, force);
  };
  node.containsClass = function (className) {
    return _d2.default.containsClass(node, className);
  };
  node.remove = function () {
    var nodeToRemove = arguments.length <= 0 || arguments[0] === undefined ? node : arguments[0];

    var oldNode = _d2.default.remove(nodeToRemove);
    node = null;

    return oldNode;
  };

  return node;
}

},{"./d.js":1}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.find = find;
exports.findAll = findAll;

var _djsfy = require('./djsfy');

var _djsfy2 = _interopRequireDefault(_djsfy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function find(string) {
  var rootElement = arguments.length <= 1 || arguments[1] === undefined ? document : arguments[1];

  return (0, _djsfy2.default)(rootElement.querySelector(string));
}

function findAll(string) {
  var rootElement = arguments.length <= 1 || arguments[1] === undefined ? document : arguments[1];

  return rootElement.querySelectorAll(string);
}

},{"./djsfy":2}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = create;
exports.remove = remove;

var _djsfy = require('./djsfy.js');

var _djsfy2 = _interopRequireDefault(_djsfy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function create(string) {
  var fragment = document.createDocumentFragment();
  var element = fragment.appendChild(document.createElement('div'));

  element.innerHTML = string.trim();

  if (element.childNodes.length === 1) {
    element = element.lastChild;
  }

  return (0, _djsfy2.default)(element.cloneNode(true));
}

function remove(node) {
  if (node.parentNode) {
    return node.parentNode.removeChild(node);
  }

  return null;
}

},{"./djsfy.js":2}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.css = css;
exports.addClass = addClass;
exports.containsClass = containsClass;
exports.removeClass = removeClass;
exports.toggleClass = toggleClass;

var _djsfy = require('./djsfy');

var _djsfy2 = _interopRequireDefault(_djsfy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Edge / IE
var MS = 'ms';
// Chrome / Safari
var WEBKIT = 'webkit';
// Firefox
var MOZ = 'moz';
// Opera
var O = 'o';
var XV = 'xv';
// KDE
var KHTML = 'khtml';

var PREFIXIES = [MS, WEBKIT, MOZ, O, XV, KHTML];

var CSS_PREFIXED = {
  float: 'cssFloat'
};

function css(node, cssStyles) {
  if (!node || node.nodeType === 8 || node.nodeType === 3 || !node.style) {
    return null;
  }

  for (var key in cssStyles) {
    if (Object.hasOwnProperty.call(cssStyles, key)) {
      var keyPrefixed = getStyleWithPrefixKey({
        styleList: node.style,
        styleToCheck: key
      });

      if (keyPrefixed) {
        node.style[keyPrefixed] = cssStyles[key];
      }
    }
  }

  return (0, _djsfy2.default)(node);
}

function addClass(node, classList) {
  var currentClassList = node.getAttribute('class') || '';

  classList = parseArray(classList) || [];

  if (classList instanceof Array) {
    for (var i = 0, length = classList.length; i < length; i++) {
      if (!classList[i].trim()) {
        throw new SyntaxError('djs.addClass(): Empty strings are not valid class name');
      }

      if (!containsClassIntoList(currentClassList, classList[i])) {
        currentClassList += ' ' + classList[i].trim();
      }
    }
  }

  node.setAttribute('class', currentClassList.trim());

  return (0, _djsfy2.default)(node);
}

function containsClass(node, className) {
  if (!node) {
    throw new Error('The element must be not empty.');
  }

  assertClassName(className);

  return containsClassIntoList(node.getAttribute('class'), className);
}

function removeClass(node, classToRemove) {
  var currentClassList = getCurrentClassList(node);

  classToRemove = parseArray(classToRemove) || [];

  if (!currentClassList.length || !classToRemove.length) {
    return (0, _djsfy2.default)(node);
  }

  if (classToRemove instanceof Array) {
    classToRemoveInteraction: for (var i = 0, length = classToRemove.length; i < length; i++) {
      var className = classToRemove[i];
      assertClassName(className);

      currentClassListInteraction: for (var y = 0, _length = currentClassList.length; y < _length; y++) {
        if (className === currentClassList[y]) {
          currentClassList.splice(y, 1);
          continue classToRemoveInteraction;
        }
      }
    }
  }

  node.setAttribute('class', currentClassList.join(' '));

  return (0, _djsfy2.default)(node);
}

function toggleClass(node, className, force) {
  if (!node) {
    throw new Error('The element must be not empty.');
  }

  assertClassName(className);

  var currentClassList = getCurrentClassList(node);

  if (containsClassIntoList(currentClassList, className)) {
    if (!force) {
      removeClass(node, className);
    }
  } else {
    if (force !== false) {
      addClass(node, className);
    }
  }

  return (0, _djsfy2.default)(node);
}

function getCurrentClassList(node) {
  return parseArray(node.getAttribute('class')) || [];
}

function assertClassName(className) {
  if (!className) {
    throw new Error('The className provided (\'' + className + '\') must be not empty.');
  }

  if (containsWhitespaces(className)) {
    throw new Error('The className provided (\'' + className + '\') contains HTML space characters, which are not valid.');
  }
}

function containsWhitespaces(string) {
  return string.match(/\s/);
}

function containsClassIntoList(classList, classToCheck) {
  classList = parseArray(classList) || [];

  for (var i = 0, length = classList.length; i < length; i++) {
    if (classList[i].trim() === classToCheck.trim()) {
      return true;
    }
  }

  return false;
}

function parseArray(classList) {
  if (typeof classList === 'string') {
    classList = classList.split(' ');
  }

  return classList;
}

function getStyleWithPrefixKey(_ref) {
  var styleList = _ref.styleList;
  var styleToCheck = _ref.styleToCheck;

  if (styleToCheck in styleList) {
    return styleToCheck;
  }

  if (styleToCheck in CSS_PREFIXED) {
    return CSS_PREFIXED[styleToCheck];
  }

  for (var i = 0, length = PREFIXIES.length; i < length; i++) {
    var styleWithPrefix = '' + PREFIXIES[i] + styleToCheck[0].toUpperCase() + styleToCheck.substring(1);

    if (styleWithPrefix in styleList) {
      CSS_PREFIXED[styleToCheck] = styleWithPrefix;
      return CSS_PREFIXED[styleToCheck];
    }
  }

  return false;
}

},{"./djsfy":2}],6:[function(require,module,exports){
(function (global){
'use strict';

var _d = require('./djs/d.js');

var _d2 = _interopRequireDefault(_d);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (typeof exports === 'object' && typeof module !== 'undefined') {
  module.exports = _d2.default;
} else if (typeof define === 'function' && define.amd) {
  define([], function () {
    return _d2.default;
  });
}

var _global = undefined;

if (typeof window !== 'undefined') {
  _global = window;
} else if (typeof global !== 'undefined') {
  _global = global;
} else if (typeof self !== 'undefined') {
  _global = self;
} else {
  _global = undefined;
}

_global.djs = _d2.default;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./djs/d.js":1}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = htmlStringFromTemplateString;
function htmlStringFromTemplateString(templateObject) {
  var raw = templateObject.raw;

  var result = undefined;

  for (var _len = arguments.length, substs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    substs[_key - 1] = arguments[_key];
  }

  result = substs.reduce(function (result, subst, i) {
    var lit = raw[i];

    subst = Array.isArray(subst) ? subst.join('') : subst + '';

    if (lit[lit.length - 1] === '$') {
      subst = htmlEscape(subst);
      lit = lit.slice(0, -1);
    }

    result += lit;
    result += subst;

    return result;
  }, '');

  result += raw[raw.length - 1];

  return result;
}

function htmlEscape(str) {
  return str.replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/"/g, '&quote;').replace(/'/g, '&#39;').replace(/`/g, '&#96;');
}

},{}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
